'use client'

import React, { useState } from 'react'
import {
  Card,
  CardBody,
  CardHeader,
  Tabs,
  Tab,
  Button,
  Chip,
  Progress,
  Divider
} from '@heroui/react'

interface PositionsListProps {
  stakingPositions: any[]
  lendingPositions: any[]
}

export function PositionsList({ stakingPositions, lendingPositions }: PositionsListProps) {
  const [selectedTab, setSelectedTab] = useState('staking')

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'success'
      case 'locked': return 'warning'
      case 'unlocking': return 'primary'
      case 'completed': return 'default'
      case 'at_risk': return 'warning'
      case 'liquidated': return 'danger'
      default: return 'default'
    }
  }

  const getStatusText = (status: string) => {
    switch (status) {
      case 'active': return 'Ê¥ªË∑É'
      case 'locked': return 'ÈîÅÂÆö‰∏≠'
      case 'unlocking': return 'Ëß£ÈîÅ‰∏≠'
      case 'completed': return 'Â∑≤ÂÆåÊàê'
      case 'at_risk': return 'È£éÈô©‰∏≠'
      case 'liquidated': return 'Â∑≤Ê∏ÖÁÆó'
      default: return 'Êú™Áü•'
    }
  }

  const formatTime = (timestamp: number) => {
    const date = new Date(timestamp)
    return date.toLocaleDateString('zh-CN', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })
  }

  const getHealthColor = (healthFactor: number) => {
    if (healthFactor >= 2) return 'success'
    if (healthFactor >= 1.5) return 'warning'
    return 'danger'
  }

  const getHealthText = (healthFactor: number) => {
    if (healthFactor >= 2) return 'ÂÅ•Â∫∑'
    if (healthFactor >= 1.5) return 'Ê≥®ÊÑè'
    return 'Âç±Èô©'
  }

  return (
    <div className="space-y-6">
      <Tabs 
        selectedKey={selectedTab} 
        onSelectionChange={(key) => setSelectedTab(key as string)}
        className="w-full"
      >
        <Tab key="staking" title={`üîí Ë¥®Êäº‰ΩçÁΩÆ (${stakingPositions.length})`}>
          <div className="space-y-4">
            {stakingPositions.length === 0 ? (
              <Card>
                <CardBody className="text-center p-8">
                  <div className="text-4xl mb-4">üîí</div>
                  <h3 className="text-lg font-semibold mb-2">ÊöÇÊó†Ë¥®Êäº‰ΩçÁΩÆ</h3>
                  <p className="text-gray-600">ÊÇ®ËøòÊ≤°Êúâ‰ªª‰ΩïË¥®Êäº‰ΩçÁΩÆ</p>
                </CardBody>
              </Card>
            ) : (
              stakingPositions.map((position) => (
                <Card key={position.id}>
                  <CardBody>
                    <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
                      <div className="flex-1">
                        <div className="flex items-center gap-3 mb-3">
                          <h3 className="text-lg font-semibold">Ë¥®Êäº‰ΩçÁΩÆ #{position.id.slice(-6)}</h3>
                          <Chip 
                            color={getStatusColor(position.status)} 
                            size="sm"
                            variant="flat"
                          >
                            {getStatusText(position.status)}
                          </Chip>
                        </div>
                        
                        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                          <div>
                            <span className="text-gray-600">Ë¥®ÊäºÊï∞Èáè:</span>
                            <div className="font-semibold">{position.amount}</div>
                          </div>
                          <div>
                            <span className="text-gray-600">APY:</span>
                            <div className="font-semibold text-green-600">{position.apy}%</div>
                          </div>
                          <div>
                            <span className="text-gray-600">Ë¥®ÊäºÊó∂Èó¥:</span>
                            <div className="font-semibold">{formatTime(position.stakedAt)}</div>
                          </div>
                          <div>
                            <span className="text-gray-600">ÂæÖÈ¢ÜÂèñÂ•ñÂä±:</span>
                            <div className="font-semibold text-green-600">{position.rewards.toFixed(4)}</div>
                          </div>
                        </div>

                        {position.lockPeriod > 0 && position.status === 'locked' && (
                          <div className="mt-3">
                            <div className="flex justify-between text-sm mb-1">
                              <span>Ëß£ÈîÅËøõÂ∫¶</span>
                              <span>
                                {Math.ceil((Date.now() - position.stakedAt) / (24 * 60 * 60 * 1000))} / {position.lockPeriod} Â§©
                              </span>
                            </div>
                            <Progress 
                              value={Math.min(100, ((Date.now() - position.stakedAt) / (position.lockPeriod * 24 * 60 * 60 * 1000)) * 100)}
                              className="w-full"
                              color="primary"
                            />
                          </div>
                        )}
                      </div>

                      <div className="flex flex-col items-end gap-2">
                        <div className="text-right">
                          <div className="text-sm text-gray-600">ÊÄª‰ª∑ÂÄº</div>
                          <div className="text-lg font-bold">
                            ${(position.amount * 1000).toFixed(2)}
                          </div>
                        </div>
                        
                        <div className="flex gap-2">
                          <Button size="sm" color="success" variant="flat">
                            Êü•ÁúãËØ¶ÊÉÖ
                          </Button>
                        </div>
                      </div>
                    </div>
                  </CardBody>
                </Card>
              ))
            )}
          </div>
        </Tab>

        <Tab key="lending" title={`üè¶ ÂÄüË¥∑‰ΩçÁΩÆ (${lendingPositions.length})`}>
          <div className="space-y-4">
            {lendingPositions.length === 0 ? (
              <Card>
                <CardBody className="text-center p-8">
                  <div className="text-4xl mb-4">üè¶</div>
                  <h3 className="text-lg font-semibold mb-2">ÊöÇÊó†ÂÄüË¥∑‰ΩçÁΩÆ</h3>
                  <p className="text-gray-600">ÊÇ®ËøòÊ≤°Êúâ‰ªª‰ΩïÂÄüË¥∑‰ΩçÁΩÆ</p>
                </CardBody>
              </Card>
            ) : (
              lendingPositions.map((position) => (
                <Card key={position.id}>
                  <CardBody>
                    <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
                      <div className="flex-1">
                        <div className="flex items-center gap-3 mb-3">
                          <h3 className="text-lg font-semibold">ÂÄüË¥∑‰ΩçÁΩÆ #{position.id.slice(-6)}</h3>
                          <Chip 
                            color={getStatusColor(position.status)} 
                            size="sm"
                            variant="flat"
                          >
                            {getStatusText(position.status)}
                          </Chip>
                        </div>
                        
                        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                          <div>
                            <span className="text-gray-600">ËµÑ‰∫ß:</span>
                            <div className="font-semibold">{position.asset}</div>
                          </div>
                          <div>
                            <span className="text-gray-600">‰æõÂ∫îÈáè:</span>
                            <div className="font-semibold">{position.supplied.toFixed(4)}</div>
                          </div>
                          <div>
                            <span className="text-gray-600">ÂÄüË¥∑Èáè:</span>
                            <div className="font-semibold">{position.borrowed.toFixed(4)}</div>
                          </div>
                          <div>
                            <span className="text-gray-600">Âà©Áéá:</span>
                            <div className="font-semibold">{position.interestRate}%</div>
                          </div>
                        </div>

                        <Divider className="my-3" />

                        <div className="grid grid-cols-2 md:grid-cols-3 gap-4 text-sm">
                          <div>
                            <span className="text-gray-600">ÊäµÊäºÁéá:</span>
                            <div className="font-semibold">{position.collateralRatio.toFixed(2)}%</div>
                          </div>
                          <div>
                            <span className="text-gray-600">ÂÅ•Â∫∑Â∫¶:</span>
                            <div className="flex items-center gap-2">
                              <Chip 
                                color={getHealthColor(position.healthFactor)} 
                                size="sm"
                                variant="flat"
                              >
                                {getHealthText(position.healthFactor)}
                              </Chip>
                              <span className="font-semibold">{position.healthFactor.toFixed(2)}</span>
                            </div>
                          </div>
                          <div>
                            <span className="text-gray-600">Ê∏ÖÁÆóÈòàÂÄº:</span>
                            <div className="font-semibold">{position.liquidationThreshold}%</div>
                          </div>
                        </div>

                        {position.status === 'at_risk' && (
                          <div className="mt-3 p-3 bg-yellow-50 rounded-lg">
                            <div className="text-sm text-yellow-800">
                              <strong>‚ö†Ô∏è È£éÈô©Ë≠¶Âëä:</strong> ÊÇ®ÁöÑÂÄüË¥∑‰ΩçÁΩÆÂÅ•Â∫∑Â∫¶ËæÉ‰ΩéÔºåËØ∑ËÄÉËôëÂ¢ûÂä†ÊäµÊäºÂìÅÊàñÂÅøËøòÈÉ®ÂàÜÂÄ∫Âä°„ÄÇ
                            </div>
                          </div>
                        )}
                      </div>

                      <div className="flex flex-col items-end gap-2">
                        <div className="text-right">
                          <div className="text-sm text-gray-600">ÊÄª‰ª∑ÂÄº</div>
                          <div className="text-lg font-bold">
                            ${(position.supplied * 1000).toFixed(2)}
                          </div>
                        </div>
                        
                        <div className="flex gap-2">
                          <Button size="sm" color="primary" variant="flat">
                            ÁÆ°ÁêÜ
                          </Button>
                          <Button size="sm" color="warning" variant="flat">
                            Ë∞ÉÊï¥
                          </Button>
                        </div>
                      </div>
                    </div>
                  </CardBody>
                </Card>
              ))
            )}
          </div>
        </Tab>
      </Tabs>
    </div>
  )
}
